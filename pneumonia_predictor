{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3",
      "language": "python"
    },
    "language_info": {
      "name": "python",
      "version": "3.7.6",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "colab": {
      "name": "ai_health_assistant.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true,
        "id": "PConBg9Hx-HR"
      },
      "source": [
        "import numpy as np \n",
        "import pandas as pd \n",
        "\n",
        "\n",
        "import os\n",
        "for dirname, _, filenames in os.walk(''):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "trusted": true,
        "id": "h3ev3gDrx-HU"
      },
      "source": [
        "dataset = '/chest-xray-pneumonia/chest_xray/'\n",
        "\n",
        "train = os.path.join(dataset,\"train\")\n",
        "valid = os.path.join(dataset,\"val\")\n",
        "test = os.path.join(dataset,\"test\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "id": "L6sULsB2x-HV",
        "outputId": "aa0d7e03-9c1a-4963-cec1-12613e2b2077"
      },
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "train_datagen = ImageDataGenerator(rescale = 1/255.0)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(train , batch_size = 20 , class_mode = 'binary' , target_size = (150,150))\n",
        "val_datagen = ImageDataGenerator(rescale = 1/255.0)\n",
        "\n",
        "val_generator = val_datagen.flow_from_directory(valid , batch_size = 20 , class_mode = 'binary' , target_size = (150,150))\n",
        "test_datagen = ImageDataGenerator(rescale = 1/255.0)\n",
        "\n",
        "\n",
        "test_generator = test_datagen.flow_from_directory(test , batch_size = 20 , class_mode = 'binary' , target_size = (150,150))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 5216 images belonging to 2 classes.\n",
            "Found 16 images belonging to 2 classes.\n",
            "Found 624 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "id": "CFRpoqrTx-HV"
      },
      "source": [
        "from tensorflow.keras import layers\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.optimizers import RMSprop\n",
        "\n",
        "from tensorflow.keras.optimizers import Adam"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "id": "QVp05G0nx-HV"
      },
      "source": [
        "class myCallback(tf.keras.callbacks.Callback):\n",
        "    def on_epoch_end(self, epoch, logs={}):\n",
        "        if(logs.get('accuracy')>0.90):\n",
        "            print(\"\\nReached 90.0% accuracy so cancelling training!\")\n",
        "            self.model.stop_training = True"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "id": "cX2YDwgVx-HV"
      },
      "source": [
        "callbacks = myCallback()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "id": "KsYvbd8Rx-HV",
        "outputId": "5cb6c539-f4f6-4f77-ca89-9c56df132c42"
      },
      "source": [
        "model  = tf.keras.models.Sequential([\n",
        "    layers.Conv2D(32,(3,3), activation = 'relu' ,input_shape =  (150,150 ,3)),\n",
        "    layers.MaxPooling2D(2,2) , \n",
        "    layers.Conv2D(32  , (3,3) ,activation = 'relu'),\n",
        "    layers.MaxPooling2D(2,2),\n",
        "    layers.Flatten(),\n",
        "    layers.Dense( 512 , activation = 'relu'), \n",
        "    layers.Dense( 1 , activation = 'sigmoid')\n",
        "])\n",
        "model.compile( optimizer = 'adam' , loss = 'binary_crossentropy' , metrics  = ['accuracy'])\n",
        "history = model.fit_generator(train_generator , validation_data = val_generator , \n",
        "                             epochs = 10 , callbacks = [callbacks])\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "261/261 [==============================] - ETA: 0s - loss: 0.2433 - accuracy: 0.9178\n",
            "Reached 90.0% accuracy so cancelling training!\n",
            "261/261 [==============================] - 126s 481ms/step - loss: 0.2433 - accuracy: 0.9178 - val_loss: 0.2241 - val_accuracy: 0.8750\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "id": "AGmHaDHYx-HW"
      },
      "source": [
        "image_path = ''"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "id": "CvDNfqRDx-HW"
      },
      "source": [
        "from tensorflow.keras.preprocessing.image import load_img\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DoYfHp_j1Oeq"
      },
      "source": [
        "x = load_img(image_path , target_size = (150,150))\n",
        "x /=255\n",
        "y_pred = model.predict(x)\n",
        "print(y_pred)"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}